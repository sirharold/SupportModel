#!/usr/bin/env python3
"""
Test script para verificar la funci√≥n de an√°lisis autom√°tico de m√©tricas de recuperaci√≥n.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_analysis_function():
    """Test de la funci√≥n de an√°lisis autom√°tico."""
    print("üß™ TESTING AN√ÅLISIS AUTOM√ÅTICO DE M√âTRICAS")
    print("=" * 50)
    
    from comparison_page import generate_retrieval_metrics_analysis
    
    # Crear datos sint√©ticos para el test
    test_data = [
        {
            'Modelo': 'multi-qa-mpnet-base-dot-v1',
            'Ground Truth': 3,
            'MRR_Before': 0.3333,
            'MRR_After': 1.0000,
            'MRR_Œî': 0.6667,
            'MRR_%': 200.0,
            'Recall@1_Before': 0.0000,
            'Recall@1_After': 0.3333,
            'Recall@1_Œî': 0.3333,
            'Recall@1_%': 0.0,
            'Recall@5_Before': 0.6667,
            'Recall@5_After': 1.0000,
            'Recall@5_Œî': 0.3333,
            'Recall@5_%': 50.0,
            'Recall@10_Before': 0.6667,
            'Recall@10_After': 1.0000,
            'Recall@10_Œî': 0.3333,
            'Recall@10_%': 50.0,
            'Precision@1_Before': 0.0000,
            'Precision@1_After': 1.0000,
            'Precision@1_Œî': 1.0000,
            'Precision@1_%': 0.0,
            'Precision@5_Before': 0.4000,
            'Precision@5_After': 0.6000,
            'Precision@5_Œî': 0.2000,
            'Precision@5_%': 50.0,
            'Precision@10_Before': 0.4000,
            'Precision@10_After': 0.6000,
            'Precision@10_Œî': 0.2000,
            'Precision@10_%': 50.0,
            'Accuracy@1_Before': 0.3333,
            'Accuracy@1_After': 0.3333,
            'Accuracy@1_Œî': 0.0000,
            'Accuracy@1_%': 0.0,
            'Accuracy@5_Before': 0.5000,
            'Accuracy@5_After': 0.6000,
            'Accuracy@5_Œî': 0.1000,
            'Accuracy@5_%': 20.0,
            'Accuracy@10_Before': 0.5000,
            'Accuracy@10_After': 0.6000,
            'Accuracy@10_Œî': 0.1000,
            'Accuracy@10_%': 20.0,
        },
        {
            'Modelo': 'all-MiniLM-L6-v2',
            'Ground Truth': 3,
            'MRR_Before': 0.5000,
            'MRR_After': 1.0000,
            'MRR_Œî': 0.5000,
            'MRR_%': 100.0,
            'Recall@1_Before': 0.3333,
            'Recall@1_After': 0.3333,
            'Recall@1_Œî': 0.0000,
            'Recall@1_%': 0.0,
            'Recall@5_Before': 0.6667,
            'Recall@5_After': 0.6667,
            'Recall@5_Œî': 0.0000,
            'Recall@5_%': 0.0,
            'Recall@10_Before': 0.6667,
            'Recall@10_After': 0.6667,
            'Recall@10_Œî': 0.0000,
            'Recall@10_%': 0.0,
            'Precision@1_Before': 1.0000,
            'Precision@1_After': 1.0000,
            'Precision@1_Œî': 0.0000,
            'Precision@1_%': 0.0,
            'Precision@5_Before': 0.4000,
            'Precision@5_After': 0.4000,
            'Precision@5_Œî': 0.0000,
            'Precision@5_%': 0.0,
            'Precision@10_Before': 0.4000,
            'Precision@10_After': 0.4000,
            'Precision@10_Œî': 0.0000,
            'Precision@10_%': 0.0,
            'Accuracy@1_Before': 0.6667,
            'Accuracy@1_After': 0.6667,
            'Accuracy@1_Œî': 0.0000,
            'Accuracy@1_%': 0.0,
            'Accuracy@5_Before': 0.5000,
            'Accuracy@5_After': 0.5000,
            'Accuracy@5_Œî': 0.0000,
            'Accuracy@5_%': 0.0,
            'Accuracy@10_Before': 0.5000,
            'Accuracy@10_After': 0.5000,
            'Accuracy@10_Œî': 0.0000,
            'Accuracy@10_%': 0.0,
        },
        {
            'Modelo': 'ada',
            'Ground Truth': 3,
            'MRR_Before': 0.6667,
            'MRR_After': 1.0000,
            'MRR_Œî': 0.3333,
            'MRR_%': 50.0,
            'Recall@1_Before': 0.3333,
            'Recall@1_After': 0.3333,
            'Recall@1_Œî': 0.0000,
            'Recall@1_%': 0.0,
            'Recall@5_Before': 1.0000,
            'Recall@5_After': 1.0000,
            'Recall@5_Œî': 0.0000,
            'Recall@5_%': 0.0,
            'Recall@10_Before': 1.0000,
            'Recall@10_After': 1.0000,
            'Recall@10_Œî': 0.0000,
            'Recall@10_%': 0.0,
            'Precision@1_Before': 1.0000,
            'Precision@1_After': 1.0000,
            'Precision@1_Œî': 0.0000,
            'Precision@1_%': 0.0,
            'Precision@5_Before': 0.6000,
            'Precision@5_After': 0.6000,
            'Precision@5_Œî': 0.0000,
            'Precision@5_%': 0.0,
            'Precision@10_Before': 0.6000,
            'Precision@10_After': 0.6000,
            'Precision@10_Œî': 0.0000,
            'Precision@10_%': 0.0,
            'Accuracy@1_Before': 0.6667,
            'Accuracy@1_After': 0.6667,
            'Accuracy@1_Œî': 0.0000,
            'Accuracy@1_%': 0.0,
            'Accuracy@5_Before': 0.7000,
            'Accuracy@5_After': 0.7000,
            'Accuracy@5_Œî': 0.0000,
            'Accuracy@5_%': 0.0,
            'Accuracy@10_Before': 0.7000,
            'Accuracy@10_After': 0.7000,
            'Accuracy@10_Œî': 0.0000,
            'Accuracy@10_%': 0.0,
        }
    ]
    
    try:
        # Generar an√°lisis
        analysis = generate_retrieval_metrics_analysis(test_data)
        
        print("üìä AN√ÅLISIS GENERADO:")
        print("=" * 50)
        print(analysis)
        print("=" * 50)
        
        # Verificar que el an√°lisis contiene elementos esperados
        expected_sections = [
            "üìä Resumen General:",
            "üéØ An√°lisis de MRR",
            "üîç An√°lisis de Recall",
            "üéØ An√°lisis de Precision",
            "‚ö° Impacto del Reranking:",
            "üí° Recomendaciones:"
        ]
        
        missing_sections = []
        for section in expected_sections:
            if section not in analysis:
                missing_sections.append(section)
        
        if not missing_sections:
            print("‚úÖ Todas las secciones esperadas est√°n presentes")
        else:
            print(f"‚ùå Secciones faltantes: {missing_sections}")
            return False
        
        # Verificar que contiene informaci√≥n espec√≠fica esperada
        if "3 modelos" in analysis:
            print("‚úÖ N√∫mero de modelos detectado correctamente")
        else:
            print("‚ùå Error en detecci√≥n de n√∫mero de modelos")
            return False
        
        if "multi-qa-mpnet-base-dot-v1" in analysis:
            print("‚úÖ Mejor modelo identificado correctamente")
        else:
            print("‚ùå Error en identificaci√≥n del mejor modelo")
            return False
        
        # Verificar que las m√©tricas est√°n calculadas
        if "Recall@1:" in analysis and "Precision@5:" in analysis:
            print("‚úÖ M√©tricas de recall y precision incluidas")
        else:
            print("‚ùå Error en inclusi√≥n de m√©tricas")
            return False
        
        # Verificar recomendaciones
        if "Modelo recomendado:" in analysis:
            print("‚úÖ Recomendaci√≥n de modelo incluida")
        else:
            print("‚ùå Error en recomendaci√≥n de modelo")
            return False
        
        print("\nüéâ ¬°AN√ÅLISIS AUTOM√ÅTICO FUNCIONA CORRECTAMENTE!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando an√°lisis: {e}")
        return False

def test_empty_data():
    """Test con datos vac√≠os."""
    print("\nüß™ TESTING CON DATOS VAC√çOS")
    print("=" * 50)
    
    from comparison_page import generate_retrieval_metrics_analysis
    
    try:
        # Test con lista vac√≠a
        analysis = generate_retrieval_metrics_analysis([])
        if analysis == "":
            print("‚úÖ Manejo correcto de datos vac√≠os")
            return True
        else:
            print(f"‚ùå Error con datos vac√≠os: deber√≠a retornar string vac√≠o, retorn√≥: '{analysis}'")
            return False
    except Exception as e:
        print(f"‚ùå Error con datos vac√≠os: {e}")
        return False

def main():
    """Ejecuta todos los tests de an√°lisis."""
    print("üöÄ INICIANDO TESTS DE AN√ÅLISIS AUTOM√ÅTICO")
    print("=" * 80)
    
    tests = [
        ("An√°lisis con Datos Completos", test_analysis_function),
        ("Manejo de Datos Vac√≠os", test_empty_data)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} TEST PASSED")
            else:
                failed += 1
                print(f"‚ùå {test_name} TEST FAILED")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name} TEST ERROR: {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä RESUMEN DE TESTS: {passed} PASSED, {failed} FAILED")
    
    if failed == 0:
        print("üéâ ¬°TODOS LOS TESTS DE AN√ÅLISIS PASARON!")
        print("\nüìã CARACTER√çSTICAS DEL AN√ÅLISIS:")
        print("‚úÖ An√°lisis autom√°tico de m√©tricas de recuperaci√≥n")
        print("‚úÖ Identificaci√≥n del mejor modelo")
        print("‚úÖ C√°lculo de mejoras promedio")
        print("‚úÖ Recomendaciones basadas en resultados")
        print("‚úÖ An√°lisis de impacto del reranking")
        print("‚úÖ M√©tricas para k=1,3,5,10")
    else:
        print("‚ö†Ô∏è  Algunos tests fallaron. Revisa los errores antes de usar la funcionalidad.")
    
    return failed == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)